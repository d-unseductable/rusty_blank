platform:
  - x86
  - x64
environment:
  matrix:
    - RUST_VERSION: stable
      TARGET: msvc
    - RUST_VERSION: stable
      TARGET: gnu
matrix:
  allow_failures:
    - TARGET: msvc
      platform: x86
cache:
  - target\debug\build
  - target\debug\deps
  - vendor\bundle
  - '%USERPROFILE%\.cargo'
install:
  - ps: |
        $env:PATH += ";C:\rust\bin";
        if ($env:platform -eq 'x86') {
          $env:PATH = "C:\Ruby22\bin;${env:PATH}";
          $arch_expanded = "i686-pc-windows-${env:TARGET}";
          $env:ARCH = "x86";
          $env:bits = "32";
        } else {
          $env:PATH = "C:\Ruby22-x64\bin;${env:PATH}";
          $arch_expanded = "x86_64-pc-windows-${env:TARGET}";
          $env:ARCH = "amd64";
          $env:bits ="64";
        }
        if ($env:TARGET -eq 'gnu') {
          $env:PATH += ";C:\msys64\mingw${env:bits}\bin";
          gcc --version;
        }
        if ($env:RUST_VERSION -eq 'stable') {
          echo "Downloading $channel channel manifest";
          $manifest = "${env:Temp}\channel-rust-stable";
          Start-FileDownload "https://static.rust-lang.org/dist/channel-rust-stable" -FileName "$manifest";

          # Search the manifest lines for the correct filename based on expanded arch
          $match = Get-Content "$manifest" | Select-String -pattern "${arch_expanded}.exe" -simplematch;
          if (!$match -or !$match.line) {
            throw "Could not find ${arch_expanded} in stable channel manifest";
          }

          $env:rust_installer = $match.line;
        } else {
          $env:rust_installer = "rust-${env:RUST_VERSION}-${arch_expanded}.exe";
        }
  - curl --show-error --location --retry 5 --output rust-installer.exe https://static.rust-lang.org/dist/%rust_installer%
  - .\rust-installer.exe /VERYSILENT /NORESTART /DIR="C:\rust"
  - call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %ARCH%
  - rustc -vV
  - cargo -vV
  - ruby --version
  - gem --version
  - bundle --version
  - bundle config --local path vendor/bundle
  - bundle install
build_script:
  - bundle exec rake thermite:tarball
test_script:
  - bundle exec rake test
artifacts:
  - path: rusty_blank-*.tar.gz
before_deploy:
  - ps: |
        $tag_suffix = echo "${env:APPVEYOR_REPO_TAG_NAME}" | Select-String -pattern "-rust$"
        if ($tag_suffix) {
          $env:RUST_TAG = "1";
        }
deploy:
  - provider: GitHub
    artifact: rusty_blank-*.tar.gz
    draft: false
    prerelease: false
    on:
      appveyor_repo_tag: true
